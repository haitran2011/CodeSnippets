<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>vc</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import ReactiveCocoa
import SnapKit

final class &lt;#ViewController#&gt;: UIViewController {
    lazy var viewModel: &lt;#ViewModel#&gt; = {
        &lt;#ViewModel#&gt;()
    }()
    
    lazy var dataSource: &lt;#DataSource#&gt; = {
        &lt;#DataSource#&gt;(tableView: self.tableView)
    }()
    
    lazy var delegate: &lt;#Delegate#&gt; = {
        &lt;#Delegate#&gt;(tableView: self.tableView)
    }()
    
    lazy var tableView: UITableView = {
        let tableView = UITableView(frame: CGRectZero, style: .Plain)
        tableView.backgroundColor = CHXGroupedTableViewBackgroundColor
        tableView.alwaysBounceVertical = true
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 44
        tableView.layoutMargins = UIEdgeInsetsZero
        tableView.separatorInset = UIEdgeInsetsZero;
        tableView.tableFooterView = UIView(frame: CGRectMake(0, 0, 0, CGFloat.min))
        return tableView
    }()

    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUserInterface()
        setupEventsBinding()
        viewModel.fetchData()
    }
}

private extension &lt;#ViewController#&gt; {
    private func setupUserInterface() {
        view.addSubview(tableView)
        tableView.snp_makeConstraints { (make) -&gt; Void in
            make.edges.equalTo(view)
        }
        tableView.delegate = delegate
        tableView.dataSource = dataSource
    }
    
    private func setupEventsBinding() {
        viewModel.globalDataMetric.producer
            .skipOnce()
            .observeOnUIScheduler()
            .startWithNext { [weak self] in self?.reloadTableViewData($0) }
        viewModel.error.producer
            .skipOnce()
            .observeOnUIScheduler()
            .startWithNext { [weak self] in self?.presentError(($0)) }
    }
    
    private func reloadTableViewData(globalDataMetric: TCGlobalDataMetric) {
        dataSource.globalDataMetric = globalDataMetric
        tableView.reloadData()
    }
}

extension &lt;#ViewController#&gt; {
    
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A596AACC-4192-43A9-8688-1E7F5A889FCA</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>VC-UITableView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
