<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>vc</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import ReactiveCocoa
import SnapKit

final class &lt;#ViewController#&gt;: UIViewController {
    lazy var viewModel: &lt;#ViewModel#&gt; = {
        return &lt;#ViewModel#&gt;()
    }()
    
    lazy var dataSource: &lt;#DataSource#&gt; = {
        &lt;#DataSource#&gt;(collectionView: self.collectionView)
    }()
    
    lazy var delegate: &lt;#Delegate#&gt; = {
        &lt;#Delegate#&gt;(collectionView: self.collectionView)
    }()
    
    lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: CGRectZero, collectionViewLayout: UICollectionViewFlowLayout())
        collectionView.backgroundColor = CHXWhiteColor
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.alwaysBounceVertical = true
        return collectionView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUserInterface()
        setupReactiveCocoa()
        viewModel.fetchData()
    }
}

private extension &lt;#ViewController#&gt; {
    private func setupUserInterface() {
        view.addSubview(collectionView)
        collectionView.snp_makeConstraints { (make) -&gt; Void in
            make.edges.equalTo(view)
        }
        collectionView.dataSource = self.dataSource
        collectionView.delegate = self.delegate
    }
    
    private func setupReactiveCocoa() {
        viewModel.globalDataMetric.producer
            .skipOnce()
            .observeOnUIScheduler()
            .startWithNext { [weak self] in self?.reloadCollectionViewData($0) }
        viewModel.error.producer
            .skipOnce()
            .observeOnUIScheduler()
            .startWithNext { [weak self] in self?.presentError(($0)) }
    }
    
    func reloadCollectionViewData(globalDataMetric: TCGlobalDataMetric) {
        dataSource.globalDataMetric = globalDataMetric
        collectionView.reloadData()
    }

}

extension &lt;#ViewController#&gt; {
    
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>6AC753E3-11DD-4CC2-9264-B23894A323D6</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>VC-UICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
