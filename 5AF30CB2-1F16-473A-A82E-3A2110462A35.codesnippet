<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>dst</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import UIKit
import TinyCoordinator
import ExtensionKit

final class &lt;#DataSource#&gt;: TCDataSource, TCDataSourceable, TCImageLazyLoadable {
    deinit {
        logging("")
    }
    
    func registerReusableCell() {
        tableView.tc_registerReusableCell(class: &lt;#TableViewCell#&gt;.self)
    }
    
    func reusableCellIdentifier(for indexPath: IndexPath) -&gt; String {
         if let data = globalDataMetric.dataForItem(at: indexPath) {
            if data is &lt;#DataType#&gt; {
                return &lt;#TableViewCell#&gt;.reuseIdentifier
            } else if data is &lt;#DataType#&gt; {
                return &lt;#TableViewCell#&gt;.reuseIdentifier
            }
        }
        
        fatalError("Resuable cell identifier no provide for \(indexPath)")
    }
    
    func populateData(with data: TCDataType, forReusableCell cell: TCCellType) {
        if let reusableCell = cell as? TCReusableViewSupport {
            reusableCell.populate(data: data)
            
            // MARK: for iOS 10
            (cell as! UIView).setNeedsLayout()
            (cell as! UIView).layoutIfNeeded()
        }
    }
        
    // MARK: - TCImageLazyLoadable
    
    func lazyPopulateData(with data: TCDataType, forReusableCell cell: TCCellType) {
        if let reusableCell = cell as? TCLazyReusableViewSupport {
            reusableCell.lazyPopulate(data: data)
        }
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>5AF30CB2-1F16-473A-A82E-3A2110462A35</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>DataSource: based on UITableView file completion</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
